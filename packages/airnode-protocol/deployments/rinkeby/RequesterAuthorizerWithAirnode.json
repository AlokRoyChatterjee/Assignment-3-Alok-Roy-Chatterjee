{
  "address": "0xB20E70D03d41efB6219f104061Ae1E599eCA1a13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ExtendedWhitelistExpiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "RevokedIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "SetIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "SetWhitelistExpiration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "indefiniteWhitelistStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "airnodeToEndpointIdToRequesterToWhitelistStatus",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveAdminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveIndefiniteWhitelisterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "indefiniteWhitelisterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationExtenderRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationExtenderRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWhitelistExpirationSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "whitelistExpirationSetterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "extendWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "requesterIsWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "revokeIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "setWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49100b3b65b46d1d3fa7030cf9f5ab22602bd35942c1fefcd04d0eaa565ef5f6",
  "receipt": {
    "to": null,
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": "0xB20E70D03d41efB6219f104061Ae1E599eCA1a13",
    "transactionIndex": 49,
    "gasUsed": "2127101",
    "logsBloom": "0x
    "blockHash": "0x50fdb5df463250e24db21f3b5261e39a231a302baa6ed59f2cc289fe927ad5b3",
    "transactionHash": "0x49100b3b65b46d1d3fa7030cf9f5ab22602bd35942c1fefcd04d0eaa565ef5f6",
    "logs": [],
    "blockNumber": 9532430,
    "cumulativeGasUsed": "7603923",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3Fee217957B1b3fcA1C33d9A4557103F25C6edd5", "RequesterAuthorizerWithAirnode"],
  "solcInputHash": "c05b7ebb130ccceddfe4d0dfdccbc692",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ExtendedWhitelistExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"RevokedIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"SetIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SetWhitelistExpiration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"indefiniteWhitelistStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"airnodeToEndpointIdToRequesterToWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveAdminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveIndefiniteWhitelisterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"indefiniteWhitelisterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationExtenderRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationExtenderRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWhitelistExpirationSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"whitelistExpirationSetterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"extendWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"requesterIsWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"revokeIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"setWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Address of the account that has potentially whitelisted `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\"},\"returns\":{\"indefiniteWhitelistStatus\":\"If `setter` has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"}},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"indefiniteWhitelistCount\":\"Number of times `requester` was whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\"}},\"deriveAdminRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"adminRole\":\"Admin role\"}},\"deriveIndefiniteWhitelisterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"indefiniteWhitelisterRole\":\"Indefinite whitelister role\"}},\"deriveWhitelistExpirationExtenderRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationExtenderRole\":\"Whitelist expiration extender role\"}},\"deriveWhitelistExpirationSetterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"whitelistExpirationSetterRole\":\"Whitelist expiration setter role\"}},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}},\"isAuthorized(bytes32,address,bytes32,address,address)\":{\"details\":\"This method has redundant arguments because all authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"_0\":\"Authorization status of the request\"}},\"requesterIsWhitelisted(address,bytes32,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\"},\"returns\":{\"isWhitelisted\":\"If `requester` is whitelisted for the `airnode`\\u2013`endpointId` pair\"}},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"setter\":\"Setter of the indefinite whitelist status\"}},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"requester\":\"Requester address\",\"status\":\"Indefinite whitelist status\"}},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"details\":\"Unlike `extendWhitelistExpiration()`, this can hasten expiration\",\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"requester\":\"Requester address\"}}},\"title\":\"Authorizer contract that Airnodes can use to temporarily or indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessControlRegistry()\":{\"notice\":\"Address of the AccessControlRegistry contract that keeps the roles\"},\"airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Returns if an account has indefinitely whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\"},\"airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)\":{\"notice\":\"Returns the whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair\"},\"deriveAdminRole(address)\":{\"notice\":\"Derives the admin role for the specific Airnode address\"},\"deriveIndefiniteWhitelisterRole(address)\":{\"notice\":\"Derives the indefinite whitelister role for the specific Airnode address\"},\"deriveWhitelistExpirationExtenderRole(address)\":{\"notice\":\"Derives the whitelist expiration extender role for the specific Airnode address\"},\"deriveWhitelistExpirationSetterRole(address)\":{\"notice\":\"Derives the whitelist expiration setter role for the specific Airnode address\"},\"extendWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Extends the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration extender role\"},\"isAuthorized(bytes32,address,bytes32,address,address)\":{\"notice\":\"Verifies the authorization status of a request\"},\"requesterIsWhitelisted(address,bytes32,address)\":{\"notice\":\"Returns if `requester` is whitelisted for the `airnode`\\u2013`endpointId` pair\"},\"revokeIndefiniteWhitelistStatus(address,bytes32,address,address)\":{\"notice\":\"Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role\"},\"setIndefiniteWhitelistStatus(address,bytes32,address,bool)\":{\"notice\":\"Sets the indefinite whitelist status of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the indefinite whitelister role\"},\"setWhitelistExpiration(address,bytes32,address,uint64)\":{\"notice\":\"Sets the expiration of the temporary whitelist of `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist expiration setter role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol\":\"RequesterAuthorizerWithAirnode\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IAccessControlClient.sol\\\";\\n\\ncontract AccessControlClient is IAccessControlClient {\\n    /// @notice Address of the AccessControlRegistry contract that keeps the\\n    /// roles\\n    address public immutable override accessControlRegistry;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    constructor(address _accessControlRegistry) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        accessControlRegistry = _accessControlRegistry;\\n    }\\n}\\n\",\"keccak256\":\"0xe60c4c288e7525a3111ed4bc77ff2821bf4e5698baabd9eeff8437feb48fca8d\",\"license\":\"MIT\"},\"contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/// @title Contract that implements the AccessControlRegistry role ID\\n/// derivation logic\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive role IDs, it should inherit and use this contract instead of\\n/// re-implementing the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(address manager)\\n        internal\\n        pure\\n        returns (bytes32 rootRole)\\n    {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Description\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, string memory description)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Description hash\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, bytes32 descriptionHash)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3e870ea26934001dcdf1b75241306133d31448e08e1f57cc6209764a49659ebd\",\"license\":\"MIT\"},\"contracts/access-control-registry/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/// @title Contract that implements a generic whitelist\\n/// @notice This contract can be inherited and extended to implement temporary\\n/// and permanent whitelists\\n/// @dev This contract implements two kinds of whitelisting:\\n///   (1) Temporary, ends when the expiration timestamp is in the past\\n///   (2) Indefinite, ends when the indefinite whitelist count is zero\\n/// Multiple senders can grant and revoke indefinite whitelists\\n/// independently. The requester will be considered whitelisted as long as\\n/// there is at least one active indefinite whitelist.\\ncontract Whitelist {\\n    struct WhitelistStatus {\\n        uint64 expirationTimestamp;\\n        uint192 indefiniteWhitelistCount;\\n    }\\n\\n    mapping(bytes32 => mapping(address => WhitelistStatus))\\n        internal serviceIdToUserToWhitelistStatus;\\n\\n    mapping(bytes32 => mapping(address => mapping(address => bool)))\\n        internal serviceIdToUserToSetterToIndefiniteWhitelistStatus;\\n\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// the user for the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(\\n            expirationTimestamp >\\n                serviceIdToUserToWhitelistStatus[serviceId][user]\\n                    .expirationTimestamp,\\n            \\\"Does not extend expiration\\\"\\n        );\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of the user for\\n    /// the service\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of the user for the\\n    /// service\\n    /// @dev As long as at least there is at least one account that has set the\\n    /// indefinite whitelist status of the user for the service as true, the\\n    /// user will be considered whitelisted.\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) internal returns (uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            status &&\\n            !serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][\\n                user\\n            ][msg.sender]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = true;\\n            indefiniteWhitelistCount++;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        } else if (\\n            !status &&\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        }\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to the user for\\n    /// the service by a specific account\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) internal returns (bool revoked, uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n            revoked = true;\\n        }\\n    }\\n\\n    /// @notice Returns if the user is whitelised to use the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @return isWhitelisted If the user is whitelisted\\n    function userIsWhitelisted(bytes32 serviceId, address user)\\n        internal\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                serviceId\\n            ][user];\\n        return\\n            whitelistStatus.indefiniteWhitelistCount > 0 ||\\n            whitelistStatus.expirationTimestamp > block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8acf188bd1e96deef4cab40e45af08ac382a2b39196368dc14e75e66cf3aabfd\",\"license\":\"MIT\"},\"contracts/access-control-registry/WhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./AccessControlClient.sol\\\";\\nimport \\\"./interfaces/IWhitelistRoles.sol\\\";\\n\\n/// @title Contract that implements a whitelist controlled by\\n/// AccessControlRegistry roles\\ncontract WhitelistRoles is RoleDeriver, AccessControlClient, IWhitelistRoles {\\n    // There are four roles in this contract:\\n    // Root\\n    // \\u2514\\u2500\\u2500 (1) Admin (can grant and revoke the roles below)\\n    //     \\u251c\\u2500\\u2500 (2) Whitelist expiration extender\\n    //     \\u251c\\u2500\\u2500 (3) Whitelist expiration setter\\n    //     \\u2514\\u2500\\u2500 (4) Indefinite whitelister\\n    // Their IDs are derived from the descriptions below. Refer to\\n    // AccessControlRegistry for more information.\\n    string public override adminRoleDescription;\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration extender\\\";\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration setter\\\";\\n    string public constant override INDEFINITE_WHITELISTER_ROLE_DESCRIPTION =\\n        \\\"Indefinite whitelister\\\";\\n    bytes32 internal adminRoleDescriptionHash;\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION)\\n        );\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION)\\n        );\\n    bytes32 internal constant INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(INDEFINITE_WHITELISTER_ROLE_DESCRIPTION));\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same role IDs, meaning that granting an account a role will\\n    /// authorize it in multiple contracts. Unless you want your deployed\\n    /// contract to reuse the role configuration of another contract, use a\\n    /// unique admin role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) AccessControlClient(_accessControlRegistry) {\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration extender role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return whitelistExpirationExtenderRole Whitelist expiration extender\\n    /// role\\n    function _deriveWhitelistExpirationExtenderRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 whitelistExpirationExtenderRole)\\n    {\\n        whitelistExpirationExtenderRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration setter role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return whitelistExpirationSetterRole Whitelist expiration setter role\\n    function _deriveWhitelistExpirationSetterRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 whitelistExpirationSetterRole)\\n    {\\n        whitelistExpirationSetterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the indefinite whitelister role for the specific\\n    /// manager address\\n    /// @param manager Manager address\\n    /// @return indefiniteWhitelisterRole Indefinite whitelister role\\n    function _deriveIndefiniteWhitelisterRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 indefiniteWhitelisterRole)\\n    {\\n        indefiniteWhitelisterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x624be006cbfc6226b40e7e3bed3b151bf721d6f6b54d996590e89b84e8868c75\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IAccessControlClient {\\n    function accessControlRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf94243499ebf11af817a37221b4e049279a61bda72de2dc5adb6c97cd72e34dd\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl {\\n    event InitializedManager(address indexed manager, bytes32 rootRole);\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRole(bytes32 adminRole, string calldata description)\\n        external\\n        returns (bytes32 role);\\n\\n    function initializeAndGrantRoles(\\n        bytes32[] calldata adminRoles,\\n        string[] calldata descriptions,\\n        address[] calldata accounts\\n    ) external returns (bytes32[] memory roles);\\n\\n    function deriveRootRole(address manager)\\n        external\\n        pure\\n        returns (bytes32 rootRole);\\n\\n    function deriveRole(bytes32 adminRole, string calldata description)\\n        external\\n        pure\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x00033fb6232598ca197f7fe3fa3baa98f44fc1ee82254742d55e2a459cc53bf0\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IWhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWhitelistRoles {\\n    function adminRoleDescription() external view returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xca63a6f49b2e79ed5cdb99062da5ad25c71a2de38cdcf07b4e23cdd748d925c9\",\"license\":\"MIT\"},\"contracts/rrp/authorizers/RequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../../access-control-registry/Whitelist.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizer.sol\\\";\\n\\n/// @title Abstract contract that can be used to build Airnode authorizers that\\n/// temporarily or permanently whitelist requesters for Airnode\\u2013endpoint pairs\\nabstract contract RequesterAuthorizer is Whitelist, IRequesterAuthorizer {\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        _extendWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit ExtendedWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair and emits an event\\n    /// @dev Unlike `_extendWhitelistExpiration()`, this can hasten expiration.\\n    /// Emits the event even if it does not change the state.\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpirationAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        _setWhitelistExpiration(\\n            deriveServiceId(airnode, endpointId),\\n            requester,\\n            expirationTimestamp\\n        );\\n        emit SetWhitelistExpiration(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair and emits an event\\n    /// Emits the event even if it does not change the state.\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) internal {\\n        bytes32 serviceId = deriveServiceId(airnode, endpointId);\\n        uint192 indefiniteWhitelistCount = _setIndefiniteWhitelistStatus(\\n            serviceId,\\n            requester,\\n            status\\n        );\\n        emit SetIndefiniteWhitelistStatus(\\n            airnode,\\n            endpointId,\\n            requester,\\n            msg.sender,\\n            status,\\n            indefiniteWhitelistCount\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair by a specific account and emits an\\n    /// event\\n    /// @dev Only emits the event if it changes the state\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatusAndEmit(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) internal {\\n        bytes32 serviceId = deriveServiceId(airnode, endpointId);\\n        (\\n            bool revoked,\\n            uint192 indefiniteWhitelistCount\\n        ) = _revokeIndefiniteWhitelistStatus(serviceId, requester, setter);\\n        if (revoked) {\\n            emit RevokedIndefiniteWhitelistStatus(\\n                airnode,\\n                endpointId,\\n                requester,\\n                setter,\\n                msg.sender,\\n                indefiniteWhitelistCount\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns if `requester` is whitelisted for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return isWhitelisted If `requester` is whitelisted for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    function requesterIsWhitelisted(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) public view override returns (bool isWhitelisted) {\\n        isWhitelisted = userIsWhitelisted(\\n            deriveServiceId(airnode, endpointId),\\n            requester\\n        );\\n    }\\n\\n    /// @notice Verifies the authorization status of a request\\n    /// @dev This method has redundant arguments because all authorizer\\n    /// contracts have to have the same interface and potential authorizer\\n    /// contracts may require to access the arguments that are redundant here\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param sponsor Sponsor address\\n    /// @param requester Requester address\\n    /// @return Authorization status of the request\\n    function isAuthorized(\\n        bytes32 requestId, // solhint-disable-line no-unused-vars\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor, // solhint-disable-line no-unused-vars\\n        address requester\\n    ) external view override returns (bool) {\\n        return requesterIsWhitelisted(airnode, endpointId, requester);\\n    }\\n\\n    /// @notice Returns the whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @return expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    /// @return indefiniteWhitelistCount Number of times `requester` was\\n    /// whitelisted indefinitely for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        override\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                deriveServiceId(airnode, endpointId)\\n            ][requester];\\n        expirationTimestamp = whitelistStatus.expirationTimestamp;\\n        indefiniteWhitelistCount = whitelistStatus.indefiniteWhitelistCount;\\n    }\\n\\n    /// @notice Returns if an account has indefinitely whitelisted `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Address of the account that has potentially whitelisted\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair indefinitely\\n    /// @return indefiniteWhitelistStatus If `setter` has indefinitely\\n    /// whitelisted `requester` for the `airnode`\\u2013`endpointId` pair\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view override returns (bool indefiniteWhitelistStatus) {\\n        indefiniteWhitelistStatus = serviceIdToUserToSetterToIndefiniteWhitelistStatus[\\n            deriveServiceId(airnode, endpointId)\\n        ][requester][setter];\\n    }\\n\\n    /// @notice Called privately to derive a service ID out of the Airnode\\n    /// address and the endpoint ID\\n    /// @dev This is done to re-use the more general Whitelist contract for\\n    /// the specific case of Airnode\\u2013endpoint pairs\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @return serviceId Service ID\\n    function deriveServiceId(address airnode, bytes32 endpointId)\\n        private\\n        pure\\n        returns (bytes32 serviceId)\\n    {\\n        serviceId = keccak256(abi.encodePacked(airnode, endpointId));\\n    }\\n}\\n\",\"keccak256\":\"0x0b152b8d401cc37629cb8d48176d1ab9089272dda57f98ef687edfdffec8e91f\",\"license\":\"MIT\"},\"contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../../access-control-registry/WhitelistRoles.sol\\\";\\nimport \\\"./RequesterAuthorizer.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizerWithAirnode.sol\\\";\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Authorizer contract that Airnodes can use to temporarily or\\n/// indefinitely whitelist requesters for Airnode\\u2013endpoint pairs\\ncontract RequesterAuthorizerWithAirnode is\\n    WhitelistRoles,\\n    RequesterAuthorizer,\\n    IRequesterAuthorizerWithAirnode\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) WhitelistRoles(_accessControlRegistry, _adminRoleDescription) {}\\n\\n    /// @notice Extends the expiration of the temporary whitelist of\\n    /// `requester` for the `airnode`\\u2013`endpointId` pair if the sender has the\\n    /// whitelist expiration extender role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            airnode == msg.sender ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveWhitelistExpirationExtenderRole(airnode),\\n                    msg.sender\\n                ),\\n            \\\"Not expiration extender\\\"\\n        );\\n        _extendWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `requester`\\n    /// for the `airnode`\\u2013`endpointId` pair if the sender has the whitelist\\n    /// expiration setter role\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            airnode == msg.sender ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveWhitelistExpirationSetterRole(airnode),\\n                    msg.sender\\n                ),\\n            \\\"Not expiration setter\\\"\\n        );\\n        _setWhitelistExpirationAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `requester` for the\\n    /// `airnode`\\u2013`endpointId` pair if the sender has the indefinite\\n    /// whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param status Indefinite whitelist status\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external override {\\n        require(\\n            airnode == msg.sender ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveIndefiniteWhitelisterRole(airnode),\\n                    msg.sender\\n                ),\\n            \\\"Not indefinite whitelister\\\"\\n        );\\n        _setIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            status\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted by a specific\\n    /// account that no longer has the indefinite whitelister role\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param requester Requester address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external override {\\n        require(\\n            airnode != setter &&\\n                !IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveIndefiniteWhitelisterRole(airnode),\\n                    setter\\n                ),\\n            \\\"setter is indefinite whitelister\\\"\\n        );\\n        _revokeIndefiniteWhitelistStatusAndEmit(\\n            airnode,\\n            endpointId,\\n            requester,\\n            setter\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific Airnode address\\n    /// @param airnode Airnode address\\n    /// @return adminRole Admin role\\n    function deriveAdminRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveAdminRole(airnode);\\n    }\\n\\n    /// @notice Derives the whitelist expiration extender role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationExtenderRole Whitelist expiration extender\\n    /// role\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationExtenderRole)\\n    {\\n        whitelistExpirationExtenderRole = _deriveWhitelistExpirationExtenderRole(\\n            airnode\\n        );\\n    }\\n\\n    /// @notice Derives the whitelist expiration setter role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return whitelistExpirationSetterRole Whitelist expiration setter role\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 whitelistExpirationSetterRole)\\n    {\\n        whitelistExpirationSetterRole = _deriveWhitelistExpirationSetterRole(\\n            airnode\\n        );\\n    }\\n\\n    /// @notice Derives the indefinite whitelister role for the specific\\n    /// Airnode address\\n    /// @param airnode Airnode address\\n    /// @return indefiniteWhitelisterRole Indefinite whitelister role\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        public\\n        view\\n        override\\n        returns (bytes32 indefiniteWhitelisterRole)\\n    {\\n        indefiniteWhitelisterRole = _deriveIndefiniteWhitelisterRole(airnode);\\n    }\\n}\\n\",\"keccak256\":\"0x4cd16af8a007fcd100d0b4a20adae9df0ec09ee34a479dcda6f00861c2d55af7\",\"license\":\"MIT\"},\"contracts/rrp/authorizers/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IAuthorizer {\\n    function isAuthorized(\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 endpointId,\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb02d37441f46d3167a3815fd74437fe9c79c97dd1ac0659abee1f2c7dc8fb19c\",\"license\":\"MIT\"},\"contracts/rrp/authorizers/interfaces/IRequesterAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IRequesterAuthorizer is IAuthorizer {\\n    event ExtendedWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        address indexed airnode,\\n        bytes32 endpointId,\\n        address indexed requester,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    function extendWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external;\\n\\n    function requesterIsWhitelisted(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    ) external view returns (bool isWhitelisted);\\n\\n    function airnodeToEndpointIdToRequesterToWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(\\n        address airnode,\\n        bytes32 endpointId,\\n        address requester,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n}\\n\",\"keccak256\":\"0x4853820d1a3d8337b5ae59ab7a1776f6558cf6fdbfa7f22985464d5183191a92\",\"license\":\"MIT\"},\"contracts/rrp/authorizers/interfaces/IRequesterAuthorizerWithAirnode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../../../access-control-registry/interfaces/IWhitelistRoles.sol\\\";\\nimport \\\"./IRequesterAuthorizer.sol\\\";\\n\\ninterface IRequesterAuthorizerWithAirnode is\\n    IWhitelistRoles,\\n    IRequesterAuthorizer\\n{\\n    function deriveAdminRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationExtenderRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveWhitelistExpirationSetterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n\\n    function deriveIndefiniteWhitelisterRole(address airnode)\\n        external\\n        view\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0xbac0cd69f77f1b69983b0efda932c33560b477e0641eb88c34e22a4d3024b565\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002ae838038062002ae88339818101604052810190620000379190620002c3565b818181600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a490620003c7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505060008151116200012c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012390620003e9565b60405180910390fd5b8060009080519060200190620001449291906200017e565b5080604051602001620001589190620003ae565b604051602081830303815290604052805190602001206001819055505050505062000656565b8280546200018c90620004fb565b90600052602060002090601f016020900481019282620001b05760008555620001fc565b82601f10620001cb57805160ff1916838001178555620001fc565b82800160010185558215620001fc579182015b82811115620001fb578251825591602001919060010190620001de565b5b5090506200020b91906200020f565b5090565b5b808211156200022a57600081600090555060010162000210565b5090565b6000620002456200023f8462000434565b6200040b565b905082815260208101848484011115620002645762000263620005ca565b5b62000271848285620004c5565b509392505050565b6000815190506200028a816200063c565b92915050565b600082601f830112620002a857620002a7620005c5565b5b8151620002ba8482602086016200022e565b91505092915050565b60008060408385031215620002dd57620002dc620005d4565b5b6000620002ed8582860162000279565b925050602083015167ffffffffffffffff811115620003115762000310620005cf565b5b6200031f8582860162000290565b9150509250929050565b600062000336826200046a565b62000342818562000486565b935062000354818560208601620004c5565b80840191505092915050565b60006200036f60108362000475565b91506200037c82620005ea565b602082019050919050565b600062000396601c8362000475565b9150620003a38262000613565b602082019050919050565b6000620003bc828462000329565b915081905092915050565b60006020820190508181036000830152620003e28162000360565b9050919050565b60006020820190508181036000830152620004048162000387565b9050919050565b6000620004176200042a565b905062000425828262000531565b919050565b6000604051905090565b600067ffffffffffffffff82111562000452576200045162000596565b5b6200045d82620005d9565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200049e82620004a5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620004e5578082015181840152602081019050620004c8565b83811115620004f5576000848401525b50505050565b600060028204905060018216806200051457607f821691505b602082108114156200052b576200052a62000567565b5b50919050565b6200053c82620005d9565b810181811067ffffffffffffffff821117156200055e576200055d62000596565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4143522061646472657373207a65726f00000000000000000000000000000000600082015250565b7f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000600082015250565b620006478162000491565b81146200065357600080fd5b50565b60805160601c6124576200069160003960008181610399015281816104a2015281816105dc0152818161087001526109ac01526124576000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063661f53b7116100a25780637e766bc1116100715780637e766bc1146102cc57806382d229e3146102e85780639caa101b14610319578063b6316d8814610349578063d55a42dd146103795761010b565b8063661f53b7146102445780636bd2bdd0146102745780636db798f91461029257806373c0627e146102b05761010b565b80634c8f1d8d116100de5780634c8f1d8d146101965780634cffd606146101b457806352300976146101e45780635d51dbdc146102145761010b565b80631ce9ae0714610110578063216de27e1461012e57806343b649621461015e5780634751c2e21461017a575b600080fd5b610118610397565b6040516101259190611ec4565b60405180910390f35b61014860048036038101906101439190611abc565b6103bb565b6040516101559190611edf565b60405180910390f35b61017860048036038101906101739190611b23565b61046b565b005b610194600480360381019061018f9190611b8a565b6105a5565b005b61019e6106df565b6040516101ab9190611fd5565b60405180910390f35b6101ce60048036038101906101c99190611a3c565b61076d565b6040516101db9190611efa565b60405180910390f35b6101fe60048036038101906101f99190611a3c565b61077f565b60405161020b9190611efa565b60405180910390f35b61022e60048036038101906102299190611c1e565b610791565b60405161023b9190611edf565b60405180910390f35b61025e60048036038101906102599190611a69565b6107a9565b60405161026b9190611edf565b60405180910390f35b61027c6107c7565b6040516102899190611fd5565b60405180910390f35b61029a610800565b6040516102a79190611fd5565b60405180910390f35b6102ca60048036038101906102c59190611b8a565b610839565b005b6102e660048036038101906102e19190611abc565b610973565b005b61030260048036038101906102fd9190611a69565b610ab0565b604051610310929190612097565b60405180910390f35b610333600480360381019061032e9190611a3c565b610b5f565b6040516103409190611efa565b60405180910390f35b610363600480360381019061035e9190611a3c565b610b71565b6040516103709190611efa565b60405180910390f35b610381610b83565b60405161038e9190611fd5565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600360006103cb8787610bbc565b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061055457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d148546104e586610b5f565b336040518363ffffffff1660e01b8152600401610503929190611f15565b60206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190611bf1565b5b610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90611ff7565b60405180910390fd5b61059f84848484610bef565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061068e57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d1485461061f86610b71565b336040518363ffffffff1660e01b815260040161063d929190611f15565b60206040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068d9190611bf1565b5b6106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c490612037565b60405180910390fd5b6106d984848484610c94565b50505050565b600080546106ec906121d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610718906121d6565b80156107655780601f1061073a57610100808354040283529160200191610765565b820191906000526020600020905b81548152906001019060200180831161074857829003601f168201915b505050505081565b600061077882610d2c565b9050919050565b600061078a82610d49565b9050919050565b600061079e8585846107a9565b905095945050505050565b60006107be6107b88585610bbc565b83610dbf565b90509392505050565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061092257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d148546108b38661077f565b336040518363ffffffff1660e01b81526004016108d1929190611f15565b60206040518083038186803b1580156108e957600080fd5b505afa1580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190611bf1565b5b610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095890612017565b60405180910390fd5b61096d84848484610e8f565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610a5f57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166391d148546109ef86610b5f565b836040518363ffffffff1660e01b8152600401610a0d929190611f15565b60206040518083038186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611bf1565b155b610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9590612057565b60405180910390fd5b610aaa84848484610f27565b50505050565b600080600060026000610ac38888610bbc565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900467ffffffffffffffff1692508060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff16915050935093915050565b6000610b6a82610fd7565b9050919050565b6000610b7c8261104d565b9050919050565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b60008282604051602001610bd1929190611e55565b60405160208183030381529060405280519060200120905092915050565b6000610bfb8585610bbc565b90506000610c0a8285856110c3565b90503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f13d4d6afcb6d196f753a522f275673066719bb13944bd021efd1fca4286df20d888786604051610c8493929190611f75565b60405180910390a4505050505050565b610ca8610ca18585610bbc565b838361153d565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f375ee45428e158031095010484fd6451af89c501c79d75e390da4e91eb480ce18685604051610d1e929190611fac565b60405180910390a450505050565b6000610d42610d3a836115bc565b6001546115ec565b9050919050565b6000610db8610d5783610d2c565b6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e646572000000815250604051602001610d9d9190611ead565b604051602081830303815290604052805190602001206115ec565b9050919050565b6000806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff161180610e865750428160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16115b91505092915050565b610ea3610e9c8585610bbc565b838361161f565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167ff9b174be67f83278d4516865d1b9ba4576b73e523ea0c2f124ea29152bb1b6768685604051610f19929190611fac565b60405180910390a450505050565b6000610f338585610bbc565b9050600080610f4383868661175b565b915091508115610fce578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fdca622020d204c36e9588e7be4184758283d992606ab73318776824b44e2859d893386604051610fc593929190611f3e565b60405180910390a45b50505050505050565b6000611046610fe583610d2c565b6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525060405160200161102b9190611ead565b604051602081830303815290604052805190602001206115ec565b9050919050565b60006110bc61105b83610d2c565b6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e2073657474657200000000008152506040516020016110a19190611ead565b604051602081830303815290604052805190602001206115ec565b9050919050565b60006002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1690508180156111e457506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561133c5760016003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061129a90612208565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550611536565b811580156113e157506003600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156115355760006003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611497906121ac565b915050806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff1602179055505b5b9392505050565b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b6000816040516020016115cf9190611e3a565b604051602081830303815290604052805190602001209050919050565b60008282604051602001611601929190611e81565b60405160208183030381529060405280519060200120905092915050565b6002600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff16116116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390612077565b60405180910390fd5b806002600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b6000806002600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160089054906101000a900477ffffffffffffffffffffffffffffffffffffffffffffffff1690506003600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156119cb5760006003600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611929906121ac565b915050806002600087815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160086101000a81548177ffffffffffffffffffffffffffffffffffffffffffffffff021916908377ffffffffffffffffffffffffffffffffffffffffffffffff160217905550600191505b935093915050565b6000813590506119e2816123c5565b92915050565b6000813590506119f7816123dc565b92915050565b600081519050611a0c816123dc565b92915050565b600081359050611a21816123f3565b92915050565b600081359050611a368161240a565b92915050565b600060208284031215611a5257611a516122d5565b5b6000611a60848285016119d3565b91505092915050565b600080600060608486031215611a8257611a816122d5565b5b6000611a90868287016119d3565b9350506020611aa186828701611a12565b9250506040611ab2868287016119d3565b9150509250925092565b60008060008060808587031215611ad657611ad56122d5565b5b6000611ae4878288016119d3565b9450506020611af587828801611a12565b9350506040611b06878288016119d3565b9250506060611b17878288016119d3565b91505092959194509250565b60008060008060808587031215611b3d57611b3c6122d5565b5b6000611b4b878288016119d3565b9450506020611b5c87828801611a12565b9350506040611b6d878288016119d3565b9250506060611b7e878288016119e8565b91505092959194509250565b60008060008060808587031215611ba457611ba36122d5565b5b6000611bb2878288016119d3565b9450506020611bc387828801611a12565b9350506040611bd4878288016119d3565b9250506060611be587828801611a27565b91505092959194509250565b600060208284031215611c0757611c066122d5565b5b6000611c15848285016119fd565b91505092915050565b600080600080600060a08688031215611c3a57611c396122d5565b5b6000611c4888828901611a12565b9550506020611c59888289016119d3565b9450506040611c6a88828901611a12565b9350506060611c7b888289016119d3565b9250506080611c8c888289016119d3565b9150509295509295909350565b611ca2816120e7565b82525050565b611cb9611cb4826120e7565b612249565b82525050565b611cc8816120f9565b82525050565b611cd781612105565b82525050565b611cee611ce982612105565b61225b565b82525050565b6000611cff826120c0565b611d0981856120cb565b9350611d19818560208601612179565b611d22816122da565b840191505092915050565b6000611d38826120c0565b611d4281856120dc565b9350611d52818560208601612179565b80840191505092915050565b6000611d6b601a836120cb565b9150611d76826122f8565b602082019050919050565b6000611d8e6017836120cb565b9150611d9982612321565b602082019050919050565b6000611db16015836120cb565b9150611dbc8261234a565b602082019050919050565b6000611dd46020836120cb565b9150611ddf82612373565b602082019050919050565b6000611df7601a836120cb565b9150611e028261239c565b602082019050919050565b611e168161212f565b82525050565b611e2581612167565b82525050565b611e3481612153565b82525050565b6000611e468284611ca8565b60148201915081905092915050565b6000611e618285611ca8565b601482019150611e718284611cdd565b6020820191508190509392505050565b6000611e8d8285611cdd565b602082019150611e9d8284611cdd565b6020820191508190509392505050565b6000611eb98284611d2d565b915081905092915050565b6000602082019050611ed96000830184611c99565b92915050565b6000602082019050611ef46000830184611cbf565b92915050565b6000602082019050611f0f6000830184611cce565b92915050565b6000604082019050611f2a6000830185611cce565b611f376020830184611c99565b9392505050565b6000606082019050611f536000830186611cce565b611f606020830185611c99565b611f6d6040830184611e0d565b949350505050565b6000606082019050611f8a6000830186611cce565b611f976020830185611cbf565b611fa46040830184611e0d565b949350505050565b6000604082019050611fc16000830185611cce565b611fce6020830184611e1c565b9392505050565b60006020820190508181036000830152611fef8184611cf4565b905092915050565b6000602082019050818103600083015261201081611d5e565b9050919050565b6000602082019050818103600083015261203081611d81565b9050919050565b6000602082019050818103600083015261205081611da4565b9050919050565b6000602082019050818103600083015261207081611dc7565b9050919050565b6000602082019050818103600083015261209081611dea565b9050919050565b60006040820190506120ac6000830185611e2b565b6120b96020830184611e0d565b9392505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006120f28261210f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061217282612153565b9050919050565b60005b8381101561219757808201518184015260208101905061217c565b838111156121a6576000848401525b50505050565b60006121b78261212f565b915060008214156121cb576121ca612277565b5b600182039050919050565b600060028204905060018216806121ee57607f821691505b60208210811415612202576122016122a6565b5b50919050565b60006122138261212f565b915077ffffffffffffffffffffffffffffffffffffffffffffffff82141561223e5761223d612277565b5b600182019050919050565b600061225482612265565b9050919050565b6000819050919050565b6000612270826122eb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4e6f7420696e646566696e6974652077686974656c6973746572000000000000600082015250565b7f4e6f742065787069726174696f6e20657874656e646572000000000000000000600082015250565b7f4e6f742065787069726174696f6e207365747465720000000000000000000000600082015250565b7f73657474657220697320696e646566696e6974652077686974656c6973746572600082015250565b7f446f6573206e6f7420657874656e642065787069726174696f6e000000000000600082015250565b6123ce816120e7565b81146123d957600080fd5b50565b6123e5816120f9565b81146123f057600080fd5b50565b6123fc81612105565b811461240757600080fd5b50565b61241381612153565b811461241e57600080fd5b5056fea2646970667358221220c2596847de7e5f9a1ed35839fbbb24d87027ab59a70f98ae5103b290f9acbd8264736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Address of the account that has potentially whitelisted `requester` for the `airnode`–`endpointId` pair indefinitely"
        },
        "returns": {
          "indefiniteWhitelistStatus": "If `setter` has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
        }
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "indefiniteWhitelistCount": "Number of times `requester` was whitelisted indefinitely for the `airnode`–`endpointId` pair"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description"
        }
      },
      "deriveAdminRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "adminRole": "Admin role"
        }
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "indefiniteWhitelisterRole": "Indefinite whitelister role"
        }
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationExtenderRole": "Whitelist expiration extender role"
        }
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "whitelistExpirationSetterRole": "Whitelist expiration setter role"
        }
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      },
      "isAuthorized(bytes32,address,bytes32,address,address)": {
        "details": "This method has redundant arguments because all authorizer contracts have to have the same interface and potential authorizer contracts may require to access the arguments that are redundant here",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requestId": "Request ID",
          "requester": "Requester address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "_0": "Authorization status of the request"
        }
      },
      "requesterIsWhitelisted(address,bytes32,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address"
        },
        "returns": {
          "isWhitelisted": "If `requester` is whitelisted for the `airnode`–`endpointId` pair"
        }
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "setter": "Setter of the indefinite whitelist status"
        }
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "requester": "Requester address",
          "status": "Indefinite whitelist status"
        }
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "details": "Unlike `extendWhitelistExpiration()`, this can hasten expiration",
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "requester": "Requester address"
        }
      }
    },
    "title": "Authorizer contract that Airnodes can use to temporarily or indefinitely whitelist requesters for Airnode–endpoint pairs",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessControlRegistry()": {
        "notice": "Address of the AccessControlRegistry contract that keeps the roles"
      },
      "airnodeToEndpointIdToRequesterToSetterToIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Returns if an account has indefinitely whitelisted `requester` for the `airnode`–`endpointId` pair"
      },
      "airnodeToEndpointIdToRequesterToWhitelistStatus(address,bytes32,address)": {
        "notice": "Returns the whitelist status of `requester` for the `airnode`–`endpointId` pair"
      },
      "deriveAdminRole(address)": {
        "notice": "Derives the admin role for the specific Airnode address"
      },
      "deriveIndefiniteWhitelisterRole(address)": {
        "notice": "Derives the indefinite whitelister role for the specific Airnode address"
      },
      "deriveWhitelistExpirationExtenderRole(address)": {
        "notice": "Derives the whitelist expiration extender role for the specific Airnode address"
      },
      "deriveWhitelistExpirationSetterRole(address)": {
        "notice": "Derives the whitelist expiration setter role for the specific Airnode address"
      },
      "extendWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Extends the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration extender role"
      },
      "isAuthorized(bytes32,address,bytes32,address,address)": {
        "notice": "Verifies the authorization status of a request"
      },
      "requesterIsWhitelisted(address,bytes32,address)": {
        "notice": "Returns if `requester` is whitelisted for the `airnode`–`endpointId` pair"
      },
      "revokeIndefiniteWhitelistStatus(address,bytes32,address,address)": {
        "notice": "Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role"
      },
      "setIndefiniteWhitelistStatus(address,bytes32,address,bool)": {
        "notice": "Sets the indefinite whitelist status of `requester` for the `airnode`–`endpointId` pair if the sender has the indefinite whitelister role"
      },
      "setWhitelistExpiration(address,bytes32,address,uint64)": {
        "notice": "Sets the expiration of the temporary whitelist of `requester` for the `airnode`–`endpointId` pair if the sender has the whitelist expiration setter role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2543,
        "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2557,
        "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "adminRoleDescriptionHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2283,
        "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToWhitelistStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)2276_storage))"
      },
      {
        "astId": 2291,
        "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
        "label": "serviceIdToUserToSetterToIndefiniteWhitelistStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(WhitelistStatus)2276_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Whitelist.WhitelistStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistStatus)2276_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)2276_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Whitelist.WhitelistStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(WhitelistStatus)2276_storage)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistStatus)2276_storage": {
        "encoding": "inplace",
        "label": "struct Whitelist.WhitelistStatus",
        "members": [
          {
            "astId": 2273,
            "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2275,
            "contract": "contracts/rrp/authorizers/RequesterAuthorizerWithAirnode.sol:RequesterAuthorizerWithAirnode",
            "label": "indefiniteWhitelistCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
